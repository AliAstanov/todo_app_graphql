package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"example/graph/model"
	"log"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var err error
	user := &model.User{ // Bu yerda pointer qilish kerak
		UserID:   uuid.NewString(),
		Username: input.Username,
		Password: *input.Password,
	}

	user, err = r.Storage.GetUserRepo().CreateUsers(ctx, user) // Endi pointerni to'g'ri ishlatish kerak
	if err != nil {
		log.Println("failed to create user:", err)
		return nil, err
	}

	return user, nil // user pointerni qaytaramiz
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, limit string, page string) ([]*model.User, error) {

	users, err := r.Storage.GetUserRepo().GetUsers(ctx, limit, page)
	if err != nil {
		log.Println("Failed to Get users::", err)
		return nil, err
	}
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userID string) (*model.User, error) {

	user, err := r.Storage.GetUserRepo().GetUserById(ctx, userID)
	if err != nil {
		log.Println("Failed to Get user:", err)
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, username *string, password *string) (*model.User, error) {

	user := &model.User{
		UserID:   userID,
		Username: *username,
		Password: *password,
	}
	user, err := r.Storage.GetUserRepo().UpdateUser(ctx, user)
	if err != nil {
		log.Println("")
		return nil, err
	}
	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userID string) (*model.User, error) {

	user, err := r.Storage.GetUserRepo().DeleteUserById(ctx, userID)
	if err != nil {
		log.Println("error on delete user:", err)
		return nil, err
	}
	return user, nil
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		TodoID: uuid.NewString(),
		UserID: input.UserID,
		Task:   input.Task,
	}
	todo, err := r.Storage.GetTodoRepo().CreateTodo(ctx, todo)
	if err != nil {
		log.Println("failed to crereate todo:", err)
		return nil, err
	}
	return todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, limit string, page string) ([]*model.Todo, error) {
	todos, err := r.Storage.GetTodoRepo().GetTodos(ctx, limit, page)
	if err != nil {
		log.Println("failed to Get todo:", err)
		return nil, err
	}
	return todos, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, todoID string) (*model.Todo, error) {
	todo, err := r.Storage.GetTodoRepo().GetTodoById(ctx, todoID)
	if err != nil {
		log.Println("Failed to get user by id:", err)
		return nil, err
	}
	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, todoID string, task string) (*model.Todo, error) {

	todo, err := r.Storage.GetTodoRepo().GetTodoById(ctx, todoID)
	if err != nil {
		log.Println("error getting todo on ypdating todo:", err)
		return nil, err
	}
	forUpdatingTodo := &model.Todo{
		TodoID: todoID,
		UserID: todo.UserID,
		Task:   task,
	}

	updatedTodo, err := r.Storage.GetTodoRepo().UpdateTodo(ctx, forUpdatingTodo)
	if err != nil {
		log.Println("error on updating todo:", err)
		return nil, err
	}
	return updatedTodo, nil
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, todoID string) (*model.Todo, error) {
	deletingTodo, err := r.Storage.GetTodoRepo().DeleteTodo(ctx, todoID)
	if err != nil {
		log.Println("error on deleting todo:", err)
		return nil, err
	}
	return deletingTodo, nil

}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
